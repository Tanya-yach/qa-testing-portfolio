{
	"info": {
		"_postman_id": "0c5bf072-ca49-4c2c-90f3-10a325c01b67",
		"name": "Luxor.cz",
		"description": "This mock-based Postman collection simulates Luxor.cz API behavior.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12770750"
	},
	"item": [
		{
			"name": "Search_valid_keyword",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains 'hra'\", function () {\r",
							"    pm.expect(pm.response.text().toLowerCase()).to.include(\"hra\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_base_url}}api/vysledky-vyhledavani?q=hra",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"vysledky-vyhledavani"
					],
					"query": [
						{
							"key": "q",
							"value": "hra"
						}
					]
				}
			},
			"response": [
				{
					"name": "Search_valid_keyword",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/vysledky-vyhledavani?q=hra",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"vysledky-vyhledavani"
							],
							"query": [
								{
									"key": "q",
									"value": "hra"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "[\r\n    {\r\n    \"products\": [\r\n        {\r\n            \"id\": \"1\",\r\n            \"title\": \"Moderní česká divadelní hra (1896-1945) - Mezi textem a inscenací (slovník děl)\",\r\n            \"price\": \"1 240 CZK\"\r\n        },\r\n        {\r\n            \"id\": \"2\",\r\n            \"title\": \"Hra o přežití\",\r\n            \"price\": \"465 CZK\"\r\n        },\r\n         {\r\n            \"id\": \"3\",\r\n            \"title\": \"Hra o přežití\",\r\n            \"price\": \"375 CZK\"\r\n        }]\r\n    }\r\n]"
				}
			]
		},
		{
			"name": "Search_empty_keyword",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Response has error about required query param\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.error).to.include(\"q\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_base_url}}api/vysledky-vyhledavani?q=  ",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"vysledky-vyhledavani"
					],
					"query": [
						{
							"key": "q",
							"value": "  "
						}
					]
				}
			},
			"response": [
				{
					"name": "Search_empty_keyword",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/vysledky-vyhledavani?q=  ",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"vysledky-vyhledavani"
							],
							"query": [
								{
									"key": "q",
									"value": "  "
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n  \"error\": \"Query parameter 'q' is required\"\r\n}"
				}
			]
		},
		{
			"name": "Filter_one_parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains products in category 'Knihy'\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.products.every(p => p.category === \"Knihy\")).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_base_url}}/api/products?category=Knihy",
					"host": [
						"{{mock_base_url}}"
					],
					"path": [
						"api",
						"products"
					],
					"query": [
						{
							"key": "category",
							"value": "Knihy"
						}
					]
				}
			},
			"response": [
				{
					"name": "Filter_one_parameter",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_base_url}}/api/products?category=Knihy",
							"host": [
								"{{mock_base_url}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "Knihy"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n  \"products\": [\r\n    {\r\n      \"id\": \"101\",\r\n      \"title\": \"Gurmánkou navždy\",\r\n      \"category\": \"Knihy\",\r\n      \"price\": \"339 CZK\"\r\n    },\r\n    {\r\n      \"id\": \"102\",\r\n      \"title\": \"Nic mě nezlomí\",\r\n      \"category\": \"Knihy\",\r\n      \"price\": \"357 CZK\"\r\n    },\r\n    {\r\n      \"id\": \"103\",\r\n      \"title\": \"Objektivní nález - Moje nejtěžší mise\",\r\n      \"category\": \"Knihy\",\r\n      \"price\": \"309 CZK\"\r\n    }\r\n  ]\r\n}"
				}
			]
		},
		{
			"name": "Filter_multi_parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"All products match filters: Knihy + 11-14 + česky\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.products.every(p =>\r",
							"        p.category === \"Knihy\" &&\r",
							"        p.age === \"11-14\" &&\r",
							"        p.language.toLowerCase() === \"česky\"\r",
							"    )).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_base_url}}/api/products?category=Knihy&age=11-14&language=česky",
					"host": [
						"{{mock_base_url}}"
					],
					"path": [
						"api",
						"products"
					],
					"query": [
						{
							"key": "category",
							"value": "Knihy"
						},
						{
							"key": "age",
							"value": "11-14"
						},
						{
							"key": "language",
							"value": "česky"
						}
					]
				}
			},
			"response": [
				{
					"name": "Filter_multy_parameter",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_base_url}}/api/products?category=Knihy&age=11-14&language=česky",
							"host": [
								"{{mock_base_url}}"
							],
							"path": [
								"api",
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "Knihy"
								},
								{
									"key": "age",
									"value": "11-14"
								},
								{
									"key": "language",
									"value": "česky"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n  \"products\": [\r\n    {\r\n      \"id\": \"101\",\r\n      \"title\": \"Božští rivalové\",\r\n      \"category\": \"Knihy\",\r\n      \"age\": \"11-14\",\r\n      \"language\": \"česky\",\r\n      \"price\": \"351 CZK\"\r\n    },\r\n    {\r\n      \"id\": \"102\",\r\n      \"title\": \"Den po dni\",\r\n      \"category\": \"Knihy\",\r\n      \"age\": \"11-14\",\r\n      \"language\": \"česky\",\r\n      \"price\": \"399 CZK\"\r\n    },\r\n    {\r\n      \"id\": \"103\",\r\n      \"title\": \"Bolestné sliby\",\r\n      \"category\": \"Knihy\",\r\n      \"age\": \"11-14\",\r\n      \"language\": \"česky\",\r\n      \"price\": \"447 CZK\"\r\n    }\r\n  ]\r\n}"
				}
			]
		},
		{
			"name": "Deteils_valid_product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all required fields\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"id\");\r",
							"    pm.expect(json).to.have.property(\"title\");\r",
							"    pm.expect(json).to.have.property(\"price\");\r",
							"    pm.expect(json).to.have.property(\"inStock\");\r",
							"});\r",
							"\r",
							"pm.test(\"Correct product is returned\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.id).to.eql(\"ISBN-IN-STOCK-001\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_base_url}}/api/products/ISBN-IN-STOCK-001",
					"host": [
						"{{mock_base_url}}"
					],
					"path": [
						"api",
						"products",
						"ISBN-IN-STOCK-001"
					]
				}
			},
			"response": [
				{
					"name": "Deteils_valid_product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_base_url}}/api/products/ISBN-IN-STOCK-001",
							"host": [
								"{{mock_base_url}}"
							],
							"path": [
								"api",
								"products",
								"ISBN-IN-STOCK-001"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n  \"id\": \"ISBN-IN-STOCK-001\",\r\n  \"title\": \"Lia a království elfů: Moc krystalů\",\r\n  \"price\": \"209 CZK\",\r\n  \"inStock\": true\r\n}"
				}
			]
		},
		{
			"name": "Error_deteils_invalid_product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message indicates product not found\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.error.toLowerCase()).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mock_base_url}}/api/products/invalid_id",
					"host": [
						"{{mock_base_url}}"
					],
					"path": [
						"api",
						"products",
						"invalid_id"
					]
				}
			},
			"response": [
				{
					"name": "Error_deteils_invalid_product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_base_url}}/api/products/invalid_id",
							"host": [
								"{{mock_base_url}}"
							],
							"path": [
								"api",
								"products",
								"invalid_id"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n  \"error\": \"Product not found\",\r\n  \"status\": 404\r\n}"
				}
			]
		},
		{
			"name": "Add_product_to_cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains confirmation message and cart ID\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"message\", \"Product added to cart\");\r",
							"    pm.expect(json).to.have.property(\"cart_id\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"product_Id\": \"ISBN-IN-STOCK-001\",\r\n    \"quantity\": 1\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/cart/add/valid",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"cart",
						"add",
						"valid"
					]
				}
			},
			"response": [
				{
					"name": "Add_product_to_cart",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/cart/add/valid",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"cart",
								"add",
								"valid"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n\"message\": \"Product added to cart\",\r\n \"cart_id\": \"cart-001\"\r\n}"
				}
			]
		},
		{
			"name": "Add_out_of_stock_product_to_cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message indicates out of stock\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.error.toLowerCase()).to.include(\"out of stock\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"product_Id\": \"ISBN-IN-STOCK-002\",\r\n    \"quantity\": 1\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/cart/add/invalid",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"cart",
						"add",
						"invalid"
					]
				}
			},
			"response": [
				{
					"name": "Add_out_of_stock_product_to_cart",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/cart/add/invalid",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"cart",
								"add",
								"invalid"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n\"error\": \"Product is out of stock\"\r\n} "
				}
			]
		},
		{
			"name": "List_of_cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Cart contains product ISBN-IN-STOCK-001 with quantity 3\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.length).to.be.greaterThan(0);\r",
							"\r",
							"    const item = json.find(p => p.product_id === \"ISBN-IN-STOCK-001\");\r",
							"\r",
							"    pm.expect(item).to.not.be.undefined;\r",
							"    pm.expect(item.quantity).to.eql(3);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/cart",
					"protocol": "https",
					"host": [
						"193fae99-9e4a-4d73-9451-e23605777895",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"api",
						"cart"
					]
				}
			},
			"response": [
				{
					"name": "List_of_cart",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/cart",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"cart"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "[\r\n  {\r\n    \"product_id\": \"ISBN-IN-STOCK-001\",\r\n    \"quantity\": 3\r\n  }\r\n]"
				}
			]
		},
		{
			"name": "Update_quantity_product_in_cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Cart updated with quantity 2 for product ISBN-IN-STOCK-001\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.be.an(\"array\");\r",
							"    const item = json.find(p => p.product_id === \"ISBN-IN-STOCK-001\");\r",
							"    pm.expect(item).to.not.be.undefined;\r",
							"    pm.expect(item.quantity).to.eql(2);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "  {\r\n    \"product_id\": \"ISBN-IN-STOCK-001\",\r\n    \"quantity\": 2\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/cart/update",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"cart",
						"update"
					]
				}
			},
			"response": [
				{
					"name": "Update_quantity_product_in_cart",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/cart/update",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"cart",
								"update"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "[\n    {\n        \"product_id\": \"ISBN-IN-STOCK-001\",\n        \"quantity\": 2\n    }\n]"
				}
			]
		},
		{
			"name": "Delete_product_from_cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response confirms product removal\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.be.an(\"array\");\r",
							"    pm.expect(json[0]).to.have.property(\"message\", \"Product removed from cart\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n    \"product_id\": \"ISBN-IN-STOCK-001\"\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/cart/remove",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"cart",
						"remove"
					]
				}
			},
			"response": [
				{
					"name": "Delete_product_from_cart",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"product_id\": \"ISBN-IN-STOCK-001\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/cart/remove",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"cart",
								"remove"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": " [\r\n    {\r\n      \"message\": \"Product removed from cart\"\r\n    }\r\n ]"
				}
			]
		},
		{
			"name": "Order_with_valid_card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Order is confirmed and has order ID\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"order_id\");\r",
							"    pm.expect(json.status).to.eql(\"confirmed\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cart\": \"cart-001\",\r\n  \"delivery\": \"bookshop_Prague\",\r\n  \"payment\": { \"method\": \"mock_card_valid\", \"card\": \"4111111111111111\"},\r\n  \"contacts\": {\"email\": \"test@mail.com\", \"phone\": \"234345345\", \"name\": \"Testname\", \"surname\": \"Testsurname\"}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/orders/create/valid",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"orders",
						"create",
						"valid"
					]
				}
			},
			"response": [
				{
					"name": "Order_with_valid_card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/orders/create/valid",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"orders",
								"create",
								"valid"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n\"order_id\": \"mock_order_1\",\r\n\"status\": \"confirmed\"\r\n}"
				}
			]
		},
		{
			"name": "Order_with_empty_card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 402\", function () {\r",
							"    pm.response.to.have.status(402);\r",
							"});\r",
							"\r",
							"pm.test(\"Response indicates payment failure\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"error\");\r",
							"    pm.expect(json.error.toLowerCase()).to.include(\"rejected\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cart\": \"cart-001\",\r\n  \"delivery\": \"bookshop_Prague\",\r\n  \"payment\": { \"method\": \"mock_card_invalid\", \"card\": \"4000000000000000\"},\r\n  \"contacts\": {\"email\": \"test@mail.com\", \"phone\": \"234345345\", \"name\": \"Testname\", \"surname\": \"Testsurname\"}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/orders/create/invalid",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"orders",
						"create",
						"invalid"
					]
				}
			},
			"response": [
				{
					"name": "Order_with_empty_card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/orders/create/invalid",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"orders",
								"create",
								"invalid"
							]
						}
					},
					"status": "Payment Required",
					"code": 402,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n \"error\": \"Payment was rejected\"\r\n}"
				}
			]
		},
		{
			"name": "Order_with_expired_tooken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message indicates expired or invalid token\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.error.toLowerCase()).to.include(\"expired\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer expired_token",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cart\": \"cart-001\",\r\n  \"delivery\": \"bookshop_Prague\",\r\n  \"payment\": { \"method\": \"mock_card_valid\", \"card\": \"4111111111111111\"}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/orders/create/token",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"orders",
						"create",
						"token"
					]
				}
			},
			"response": [
				{
					"name": "Order_with_expired_token",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/orders/create/token",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"orders",
								"create",
								"token"
							]
						}
					},
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n \"error\": \"Token expired or invalid\"\r\n}"
				}
			]
		},
		{
			"name": "Register_new_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains user ID and token\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.message).to.eql(\"User registered successfully\");\r",
							"    pm.expect(json).to.have.property(\"user_id\");\r",
							"    pm.expect(json).to.have.property(\"token\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\": \"valid_user@luxor.cz\", \r\n\"phone\": \"123456789\", \r\n\"name\": \"valid_name\", \r\n\"surname\": \"valid_surname\",\r\n\"password\": \"ValidPass123!\",\r\n\"confirm_password\": \"ValidPass123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/auth/register",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": [
				{
					"name": "Register_new_user",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/auth/register",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n\"message\": \"User registered successfully\",\r\n\"user_id\": \"user_001\",\r\n\"token\": \"jwt-token\"\r\n}"
				}
			]
		},
		{
			"name": "Login_with_valid_credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Login response contains user ID and token\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"user_id\");\r",
							"    pm.expect(json).to.have.property(\"token\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"valid_user@luxor.cz\",\r\n  \"password\": \"ValidPass123!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/auth/login",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": [
				{
					"name": "Login_with_valid_credentials",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/auth/login",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n  \"user_id\": \"user_001\",\r\n  \"token\": \"jwt-token\"  \r\n}"
				}
			]
		},
		{
			"name": "Login_with_invalid_password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Login response contains error message\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"error\", \"Invalid credentials\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"valid_user@luxor.cz\",\r\n  \"password\": \"wrong_password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/auth/login/invalid",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"auth",
						"login",
						"invalid"
					]
				}
			},
			"response": [
				{
					"name": "Login_with_invalid_password",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/auth/login/invalid",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"auth",
								"login",
								"invalid"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n\"error\": \"Invalid credentials\"\r\n}"
				}
			]
		},
		{
			"name": "Logout_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Logout success message is correct\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.message).to.eql(\"Logged out successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer valid_token",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{mock_base_url}}api/auth/logout",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": [
				{
					"name": "Logout_user",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/auth/logout",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n\"message\": \"Logged out successfully\"\r\n}"
				}
			]
		},
		{
			"name": "Update_info_profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Profile update confirmation is correct\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.message).to.eql(\"Profile updated\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer valid_token",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\": \"new_valid_user@luxor.cz\", \r\n\"name\": \"new_name\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mock_base_url}}api/user/profile",
					"host": [
						"{{mock_base_url}}api"
					],
					"path": [
						"user",
						"profile"
					]
				}
			},
			"response": [
				{
					"name": "Update_info_profile",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://193fae99-9e4a-4d73-9451-e23605777895.mock.pstmn.io/api/user/profile",
							"protocol": "https",
							"host": [
								"193fae99-9e4a-4d73-9451-e23605777895",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"api",
								"user",
								"profile"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\r\n\"message\": \"Profile updated\"\r\n}"
				}
			]
		}
	]
}